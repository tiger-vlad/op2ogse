-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------------
--| ogse_st_mgr.script                                                      |--
--| Serializable Timers Manager                                             |--
--| Malandrinus, OGS Evolution Team, 2012                                   |--
--| version 1.0                                                             |--
-------------------------------------------------------------------------------

-- Èñïîëüçîâàíèå ñîõðàíÿåìûõ (ñåðèàëèçóåìûõ) òàéìåðîâ â öåëîì ïîõîæå
-- íà èñïîëüçîâàíèå "áûñòðûõ" òàéìåðîâ èç ìîäóëÿ
-- ogse_qt.script. Ñîçäà¸òñÿ îáúåêò òàéìåðà, â í¸ì ñîçäàþòñÿ ìåòîäû
-- óñëîâèÿ è äåéñòâèÿ, îí çàïóñêàåòñÿ è äàëåå æèâ¸ò ñâîåé æèçíüþ,
-- ñðàáàòûâàÿ ïî óñëîâèþ è âûïîëíÿÿ â íóæíûé ìîìåíò çàäàííîå äåéñòâèå.
-- Ïåðâîå îòëè÷èå îò quick_timer â íåêîòîðûõ îãðàíè÷åíèÿõ ïðè
-- ñîçäàíèè, ñâÿçàííûõ ñ íåîáõîäèìîñòüþ ñîçäàâàòü îáúåêò êëàññà
-- òàéìåðà çàíîâî ïðè çàãðóçêå.  Âòîðîå îòëè÷èå, â íàëè÷èè ìåòîäîâ
-- save/load, â êîòîðûõ òàéìåð ìîæåò ñîõðàíèòü ëþáûå äàííûå,
-- íåîáõîäèìûå åìó äëÿ ðàáîòû. Ýòî ìîãóò áûòü êàê äàííûå, íåîáõîäèìûå
-- äëÿ ïðîâåðêè óñëîâèÿ, òàê è äàííûå íåîáõîäèìûå äëÿ âûïîëíåíèÿ
-- äåéñòâèÿ.

-- Ïðèìåð ñîçäàíèÿ è èñïîëüçîâàíèÿ ïðîñòîãî òàéìåðà, èñïîëüçóþùåãî
-- òîëüêî âðåìåííÎå óñëîâèå:
--
-- class "test_timer" ( ogse_st_mgr.savable_timer )
-- function test_timer:__init() super()
--   -- îáÿçàòåëüíàÿ ñòðîêà ñ èìåíåì êëàññà òàéìåðà
--   self.class = script_name() .. ".test_timer"
-- end
-- -- ìåòîä äëÿ ïåðâè÷íîé èíèöèàëèçàöèè, ìîæåò èìåòü ïðîèçâîëüíîå èìÿ
-- function test_timer:set_data( s )
--   self.str = s
-- end
-- ïåðåãðóæåííûå ìåòîäû çàãðóçêè/ñîõðàíåíèÿ ïîëüçîâàòåëüñêèõ äàííûõ
-- function test_timer:load( t )
--   self.str = unpack( t )
-- end
-- function test_timer:save( t, template )
--   table.insert( template, "string" )
--   table.insert( t,        self.str )
--   return template
-- end
-- -- ïåðåãðóæåííûé ìåòîä äåéñòâèÿ ïî âðåìåííÎìó óñëîâèþ
-- function test_timer:taction()
--   log1( self.str ) -- ÷òî-òî äåëàåì â íàçíà÷åííîå âðåìÿ
-- end
--
-- ñîçäàíèå è çàïóñê òàéìåðà
-- local t = test_timer()
-- t:set_data( "some string" )
-- t:set_delay( 600 ) -- ñðàáîòàåò ÷åðåç 10 ìèíóò ðåàëüíîãî âðåìåíè
-- èëè
-- t:set_gdelay( 600 ) -- ñðàáîòàåò ÷åðåç 10 ìèíóò èãðîâîãî âðåìåíè
-- èëè
-- t:set_gtime( game.CTime():set( ... ) ) -- ñðàáîòàåò â çàäàííûé ìîìåíò èãðîâîãî âðåìåíè
-- t:start() -- çàïóñòèòü

-- Ïðèìåð òàéìåðà ñ ïðîèçâîëüíûì óñëîâèåì. Ñëåäèò çà íåêèì íåïèñåì,
-- êîòîðûé êîãäà-òî ìîæåò áûòü âûéäåò â îíëàéí:
--
-- class "conditional_timer" ( ogse_st_mgr.savable_timer )
-- function conditional_timer:__init( timer_id ) super( timer_id )
--   self.class = script_name() .. ".conditional_timer"
-- end
-- function conditional_timer:init( npc_id )
--   self.npc_id = npc_id
--   return self -- äëÿ âûçîâà öåïî÷êîé
-- end
-- ïåðåãðóæåííûå ìåòîäû çàãðóçêè/ñîõðàíåíèÿ ïîëüçîâàòåëüñêèõ äàííûõ
-- function conditional_timer:load( t )
--   self.npc_id = unpack( t )
-- end
-- function conditional_timer:save( t, template )
--   table.insert( template, "u16"       )
--   table.insert( t,        self.npc_id )
--   return template
-- end
-- function conditional_timer:condition()
--   self.npc = level.object_by_id( self.npc_id )
--   return self.npc
-- end
-- ïåðåãðóæåííûé ìåòîä äåéñòâèÿ ïî ïîëüçîâàòåëüñêîìó óñëîâèþ (èìÿ
-- ìåòîäà action, à íå taction !)
-- function conditional_timer:action()
--   self.npc:kill( db.actor ) -- ÷òî-òî äåëàåì ïðè ïîÿâëåíèè ÷óâàêà
-- end
-- ñîçäàíèå òàéìåðà, èíèöèàëèçàöèÿ è çàïóñê
-- conditional_timer( "my_timer" ):init( 12345 ):start()
-- get_timer( "my_timer" ):stop() -- ïåðåäóìàëè è îñòàíîâèëè


function attach(sm)
  sm:subscribe({ signal = "on_load",   fun = this.on_load   })
  sm:subscribe( {signal = "on_save",   fun = this.on_save   })
  sm:subscribe( {signal = "on_update", fun = this.on_update })
end


-- óíèêàëüíûé èäåíòèôèêàòîð äëÿ ïåðåìåííîé ñî ñïèñêîì òàéìåðîâ. ÍÅ ÌÅÍßÒÜ!
local root_guid = "{663A0135-0A8F-41D9-91BA-FCCBFD59B146}_root"
-- óíèêàëüíàÿ áàçîâàÿ ÷àñòü èäåíòèôèêàòîðà òàéìåðîâ. ÍÅ ÌÅÍßÒÜ!
local storage_guid = "{36881905-5863-4D7C-BB12-0ECAC401FE1A}"
local registry = {} -- õðàíèëèùå òàéìåðîâ â ïàìÿòè.


function delete_all_timers()
  for id, timer in pairs( registry ) do
    timer:stop()
  end
end


local function get_free_id()
  for i = 0, 65535 do
    local id = tostring( i )
    if not registry[ id ] then return id end
  end
  abort( "ogse_st_mgr.get_free_id: Can't find free id for timer!" )
end


function get_timer( id )
  local timer = registry[ id ]
  ASSERT(
    timer,
    "ogse_st_mgr.get_timer: timer with id '%s' doesn't exist", id
  )
  return timer
end


function timer_exists( id )
  return registry[ id ] ~= nil
end


-- çàãðóçêà âñåõ òàéìåðîâ
function on_load()
  local timers = ogse.load_var_safe( "ogse_st_mgr.timers" )
  if not timers then return on_load_old() end
  local t_cnt = 0
  for _, timer_class in ipairs( timers ) do
    local st = ogse.load_var(
      string.format( "%s.timers.%s", script_name(), timer_class )
    )
    for _, t in ipairs( st ) do
      local timer_id = table.remove( t, 1 )
      local f, msg = loadstring( "return " .. timer_class .. "( ... )" )
      ASSERT( f, msg )
      local timer = f( timer_id )
      timer:_aux_load( t )
      timer.loaded = true
      timer:start()
      t_cnt = t_cnt + 1
    end
    log2(
      "[%s]: %s: %s timers loaded",
      script_name(), timer_class, table.getn( st )
    )
  end
  sort_all_timers()
  log2( "[%s]: %s all timers loaded", script_name(), t_cnt )
end


function on_load_old()
  local chunks = ogse.load_var_safe( "ogse_st_mgr.chunks" )
  if not chunks then return on_load_old2() end
  for _, pk in ipairs( chunks ) do
    local timer_id    = pk:r_stringZ()
    local timer_class = pk:r_stringZ()
    local f, msg = loadstring( "return " .. timer_class .. "(...)" )
    ASSERT( f, msg )
    local timer = f( timer_id )
    timer:_aux_load_old( pk )
    timer.loaded = true
    timer:start()
  end
  ogse.delete_var( "ogse_st_mgr.chunks" )
  sort_all_timers()
  log2( "[%s]: %s timers loaded", script_name(), table.getn( chunks ) )
end


function on_load_old2()
  local timers_list = ogse.load_var( root_guid, {}, "array" )
  for _, timer_id in ipairs( timers_list ) do
    local timer_chunk = ogse.load_var( storage_guid .. "_" .. timer_id )
    local timer_class = timer_chunk:r_stringZ()
    local f, msg = loadstring( "return " .. timer_class .. "(...)" )
    ASSERT( f, msg )
    local timer = f( timer_id )
    timer:_aux_load_old( timer_chunk )
    timer:start()
    ogse.delete_var( storage_guid .. "_" .. timer_id )
  end
  ogse.delete_var( root_guid )
  log2(
    "[%s]: %s old timers loaded", script_name(), table.getn( timers_list )
  )
end


-- ñîõðàíåíèå ñîñòîÿíèÿ âñåõ òàéìåðîâ
function on_save()
  local timers, tclasses = {}, {}
  for _, t in pairs( registry ) do
    if timers[ t.class ] then
      table.insert( timers[ t.class ], t )
    else
      timers[ t.class ] = { t }
      table.insert( tclasses, t.class )
    end
  end
  ogse.save_var(
    "ogse_st_mgr.timers", tclasses, "array_template", { "string" }
  )
  local t_cnt = 0
  for tclass, tlist in pairs( timers ) do
    local st, template = {}, { "string" }
    for i, timer in ipairs( tlist ) do
      local t  = { timer.id }
      table.insert( st, t )
      local types = timer:_aux_save( t )
      if i == 1 then
        for _, typ in ipairs( types ) do
          table.insert( template, typ )
        end
      end
      ASSERT(
        table.getn( t ) == table.getn( template ),
        "unexpected table size: got %s, expected %s",
        table.getn( t ), table.getn( template )
      )
      t_cnt = t_cnt + 1
    end
    ogse.save_var(
      string.format( "%s.timers.%s", script_name(), tclass ),
      st, "array_template", template
    )
    log2(
      "[%s]: %s: %s timers saved", script_name(), tclass, table.getn( st )
    )
  end
  log2( "[%s]: %s all timers saved", script_name(), t_cnt )
end


local g_high_queue = {}
local r_high_queue = {}

function sort_all_timers()
  for _, q in ipairs({ g_high_queue, r_high_queue }) do
    sort_any_timers( q )
  end
end

function register_any_timer( t )
  local q, sort_by
  if t._game_termination_time then
    q       = g_high_queue
    sort_by = t._game_termination_time
  elseif t._residual_time then
    q       = r_high_queue
    sort_by = t._loading_time + t._residual_time * 1000
  else
    abort( "unknown timer type: %s.%s", t.class, t.id )
  end
  local last_t = q[ table.getn( q ) ]
  local new_t  = {
    [ "sort_by" ] = sort_by,
    [ "timer"   ] = t,
  }
  table.insert( q, new_t )
  t._queue = q
  if not t.loaded then
    if last_t and new_t.sort_by >= last_t.sort_by then
      log2(
        "[%s]: %s.%s: skip sort_any_timer", script_name(), t.class, t.id
      )
    else
      sort_any_timers( q )
    end
  end
  registry[ t.id ] = t
end

function unregister_any_timer( t )
  local q = t._queue
  registry[ t.id ] = nil
  local found = false
  for i = 1, table.getn( q ) do
    if rawequal( t, q[ i ].timer ) then
      table.remove( q, i )
      found = true
      break
    end
  end
  ASSERT( found, "can't find requested timer: %s.%s", t.class, t.id )
end

function sort_any_timers( q )
  table.sort( q, function( a, b ) return a.sort_by < b.sort_by end )
end


function on_update()
  process_r_queue( r_high_queue )
  process_g_queue( g_high_queue )
end

function process_g_queue( q )
  while (
    table.getn( q ) > 0
    and q[ 1 ].timer._game_termination_time <= game.get_game_time()
  ) do
    local t = q[ 1 ].timer
    table.remove( q, 1 )
    registry[ t.id ] = nil
    t:taction()
  end
end

function process_r_queue( q )
  while table.getn( q ) > 0 do
    local t = q[ 1 ].timer
    local time_from_loading = 1.0e-3 * ( time_global() - t._loading_time )
    if t._residual_time <= time_from_loading then
      table.remove( q, 1 )
      registry[ t.id ] = nil
      t:taction()
    else
      break
    end
  end
end


-------------------------------------------------------------------------------
--< áàçîâûé êëàññ ñîõðàíÿåìîãî òàéìåðà äëÿ îòñëåæèâàíèÿ ïðîèçâîëüíîãî ñîáûòèÿ >
-------------------------------------------------------------------------------

-- êîíñòðóêòîð òàéìåðà â áàçîâîì êëàññå
class "savable_timer"
function savable_timer:__init( timer_id )
  self.class  = "error: it is forbidden to create instances of a base savable timer class!"
  self.loaded = false
  if timer_id then
    ASSERT(
      tostring( timer_id ),
      "savable_timer:__init: custom id assigned to timer must be a string or be convertible to a string"
    )
    ASSERT(
      ( not timer_exists( timer_id ) ),
      "savable_timer:__init: timer with the id '%s' already exists!", timer_id
    )
    self.id = tostring( timer_id )
  else
    self.id = get_free_id()
  end
  self.sm = ogse_signals.get_mgr()
end


function savable_timer:_aux_load( t )
  self._high_priority = table.remove( t, 1 )
  -- çàãðóæàåì ñîõðàí¸ííîå âðåìÿ ñðàáàòûâàíèÿ ïî øêàëå ðåàëüíûõ è èãðîâûõ
  -- ñåêóíä
  local res_time = table.remove( t, 1 )
  if res_time ~= 0 then
    -- ñòðîãî íóëåâîå çíà÷åíèå îçíà÷àåò, ÷òî òàéìåð ðåàëüíûõ ñåêóíä íå çàäàí
    self:set_delay( res_time )
  end
  -- çàãðóæàåì èãðîâîå âðåìÿ ñðàáàòûâàíèÿ
  local end_t = table.remove( t, 1 )
  if end_t ~= game.CTime() then
    self:set_gtime( end_t )
  end
  -- çàãðóæàåì èãðîâîå âðåìÿ çàïóñêà
  self._start_time = table.remove( t, 1 )
  -- çàãðóæàåì äàííûå ïîëüçîâàòåëÿ, åñëè åñòü
  if table.getn( t ) > 0 then
    self:load( t )
  end
end


function savable_timer:_aux_load_old( packet )
  self._high_priority = packet:r_bool()
  -- çàãðóæàåì ñîõðàí¸ííîå âðåìÿ ñðàáàòûâàíèÿ ïî øêàëå ðåàëüíûõ è èãðîâûõ
  -- ñåêóíä
  local res_time = packet:r_float()
  if res_time ~= 0 then
    -- ñòðîãî íóëåâîå çíà÷åíèå îçíà÷àåò, ÷òî òàéìåð ðåàëüíûõ ñåêóíä íå çàäàí
    self:set_delay( res_time )
  end
  -- çàãðóæàåì èãðîâîå âðåìÿ ñðàáàòûâàíèÿ
  local end_t = utils.r_CTime_ex( packet )
  if end_t ~= game.CTime() then
    self:set_gtime( end_t )
  end
  -- çàãðóæàåì èãðîâîå âðåìÿ çàïóñêà
  self._start_time = utils.r_CTime_ex( packet )
  -- çàãðóæàåì äàííûå ïîëüçîâàòåëÿ, åñëè åñòü
  if not packet:r_eof() then
    self:load_old( packet )
  end
end


function savable_timer:_aux_save( t )
  local template = { "bool", "float", "time", "time" }
  table.insert( t, self._high_priority )
  -- ñîõðàíåíèå âðåìåíè ñðàáàòûâàíèÿ ïî øêàëå ðåàëüíîãî è èãðîâîãî âðåìåíè
  -- âêëþ÷åíî â ñîñòàâ çàãîëîâêà òàéìåðà.
  -- ñîõðàíÿåì âðåìÿ äî ñðàáàòûâàíèÿ ïî øêàëå ðåàëüíûõ ñåêóíä
  if self._residual_time then
    -- âû÷èñëÿåì è ïèøåì íîâîå îñòàâøååñÿ äî âûïîëíåíèÿ âðåìÿ
    local time_from_loading = 1.0e-3 * ( time_global() - self._loading_time )
    local delay = self._residual_time - time_from_loading
    -- ASSERT( delay > 0, "wrong delay = %s: %s.%s", delay, self.class, self.id )
    if delay > 0 then
      table.insert( t, delay )
    else
      log2(
        "[%s]: saving wrong delay = %s: %s.%s",
        script_name(), delay, self.class, self.id
      )
      table.insert( t, -1 )
    end
  else
    -- ñòðîãî íóëåâîå çíà÷åíèå áóäåò îçíà÷àòü, ÷òî òàéìåð ðåàëüíûõ ñåêóíä íå
    -- çàäàí
    table.insert( t, 0 )
  end
  -- ñîõðàíÿåì èãðîâîå âðåìÿ ñðàáàòûâàíèÿ
  if self._game_termination_time then
    table.insert( t, self._game_termination_time )
  else
    table.insert( t, game.CTime() )
  end
  -- ñîõðàíÿåì âðåìÿ çàïóñêà
  table.insert( t, self._start_time )
  -- òåïåðü ñîõðàíÿåì äàííûå ïîëüçîâàòåëÿ, åñëè åñòü
  return self:save( t, template )
end


-- çàäàòü òî÷íîå âðåìÿ ñðàáàòûâàíèÿ â òåðìèíàõ èãðîâîãî âðåìåíè
function savable_timer:set_gtime( t ) -- àðãóìåíò - îáúåêò òèïà game.CTime
  self._game_termination_time = game.CTime( t )
  return self
end


function savable_timer:get_start_time()
  return game.CTime( self._start_time )
end


function savable_timer:get_end_time()
  ASSERT(
    self._game_termination_time,
    "savable_timer:get_end_time: termination time is not defined!"
  )
  return game.CTime( self._game_termination_time )
end


function savable_timer:set_gdelayDHMS( d, h, m, s )
  local delay = d * 24 * 3600 + h * 3600 + m * 60 + s
  self:set_gdelay( delay )
  return self
end


function savable_timer:set_HMS_of_day( h, m, s )
  local pt      = { game.get_game_time():get() }
  local now     = pt[ 4 ] * 3600 + pt[ 5 ] * 60 + pt[ 6 ] + pt[ 7 ] / 1000
  local seconds = h * 3600 + m * 60 + s
  if now > seconds then
    seconds = ( 86400 - now ) + seconds
  else
    seconds = seconds - now
  end
  self:set_gdelay( seconds )
  return self
end


-- çàäàòü çàäåðæêó ñðàáàòûâàíèÿ îò òåêóøåãî âðåìåíè â ñåêóíäàõ èãðîâîãî âðåìåíè
-- àðãóìåíò - çàäåðæêà â ñåêóíäàõ, òèï float
-- ( äðîáíàÿ ÷àñòü çàäà¸ò ìèêðîñåêóíäû )
function savable_timer:set_gdelay( delay )
  local s, ms = math.modf( delay )
  local t = game.CTime()
  t:setHMSms( 0, 0, s, ms * 1000 )
  self._game_termination_time = game.CTime( game.get_game_time() + t )
  return self
end


-- çàäàòü çàäåðæêó ñðàáàòûâàíèÿ îò òåêóøåãî âðåìåíè â ñåêóíäàõ ðåàëüíîãî
-- âðåìåíè
-- àðãóìåíò - çàäåðæêà â ñåêóíäàõ, òèï float
function savable_timer:set_delay( delay )
  self._residual_time = delay
  self._loading_time = time_global()
  return self
end

function savable_timer:get_rest_time()				--Получить оставшееся время рабочего таймера(реального)
	return self._residual_time - self._time_from_loading
end


function savable_timer:set_delayDHMS( d, h, m, s )
  local delay = d * 24 * 3600 + h * 3600 + m * 60 + s
  self:set_delay( delay )
  return self
end


-- çàïóñòèòü òàéìåð
function savable_timer:start()
  self._start_time     = self._start_time or game.get_game_time()
  self._high_priority  = false
  self._cond_slot_desc = {
    signal = "on_update", self = self, fun = self._aux_cond,
    script_name = ( self.script_name or self.class ),
  }
  self.sm:subscribe( self._cond_slot_desc )
  registry[ self.id ] = self
  return self
end


-- îñòàíîâ òàéìåðà
function savable_timer:stop()
  self.sm:unsubscribe( self._cond_slot_desc )
  registry[ self.id ] = nil
end


-- ìåòîä äëÿ âíóòðåííåãî èñïîëüçîâàíèÿ òàéìåðîì
function savable_timer:_aux_cond()
  if self._game_termination_time then
    -- åñëè ñðàáîòàë òàéìàóò ïî èãðîâîìó âðåìåíè
    if self._game_termination_time <= game.get_game_time() then
      self:stop()           -- îñòàíàâëèâàåì ïðîâåðêè
      self:taction()        -- âûïîëíÿåì äåéñòâèå ïî òàéìàóòó
    end
  elseif self._residual_time then -- ó íàñ òàéìàóò â ðåàëüíîì âðåìåíè
    local time_from_loading = 1.0e-3 * ( time_global() - self._loading_time )
    if self._residual_time <= time_from_loading then -- è îí ñðàáîòàë
      self:stop()               -- îñòàíàâëèâàåì ïðîâåðêè
      self:taction()            -- âûïîëíÿåì äåéñòâèå ïî òàéìàóòó
    else                        -- èíà÷å çàñûïàåì íà îñòàâøååñÿ âðåìÿ
      self.sm:reschedule( ( self._residual_time - time_from_loading ) * 1000 )
    end
  elseif self:condition() then -- åñëè ñðàáîòàëî óñëîâèå
    self:stop()
    self:action() -- âûïîëíÿåì äåéñòâèå ïî óñëîâèÿ
  end
end


-- óñëîâèå-çàãëóøêà íà ñëó÷àé èñïîëüçîâàíèÿ òîëüêî ñ òàéìàóòîì
function savable_timer:condition()
  return false
end


-- ïóñòûå äåéñòâèÿ â áàçîâîì êëàññå. Íóæíû äëÿ òîãî ñëó÷àÿ, êîãäà íå
-- èñïîëüçóåì ñîîòâåòñòâóþùåå äåéñòâèå â óíàñëåäîâàííîì êëàññå
function savable_timer:action()  end
function savable_timer:taction() end


-- ïåðåîïðåäåëÿòü äëÿ ñîõðàíåíèÿ/çàãðóçêè ïîëüçîâàòåëüñêèõ äàííûõ
function savable_timer:load( t ) end
function savable_timer:load_old( packet ) end
function savable_timer:save( t, template ) return template end


--------------------------------------------------------------------------------
--| Îá¸ðòêà äëÿ óïðîù¸ííîãî çàïóñêà òàéìåðà
--| ïîçâîëÿåò çàïóñòèòü ïðîñòîé òàéìåð ñ âðåìåííÎé çàäåðæêîé,
--| êîòîðûé çàïóñêàåò çàäàííóþ ôóíêöèþ, ïåðåäàâàÿ å¸ çàäàííûå ïàðàìåòðû
--------------------------------------------------------------------------------
class "delayed_fun_start" ( savable_timer )
function delayed_fun_start:__init( name ) super( name )
  self.class = "ogse_st_mgr.delayed_fun_start"
end

function delayed_fun_start:init( action_name, ... )
  self.action_name = action_name
  self.user_action = loadstring( "return " .. self.action_name .. "( ... )" )
  ASSERT(
    self.user_action,
    "delayed_fun_start:init: can not compile function with the name '%s'",
    tostring( self.action_name )
  )
  self.fun_params = { ... }
  return self
end

function delayed_fun_start:load( t )
  self.action_name, self.fun_params = unpack( t )
  self.user_action = loadstring( "return " .. self.action_name .. "( ... )" )
  ASSERT(
    self.user_action,
    "delayed_fun_start:load: can not compile function with the name '%s'",
    tostring( self.action_name )
  )
end

function delayed_fun_start:load_old( packet )
  self.action_name = packet:r_stringZ()
  self.user_action = loadstring( "return " .. self.action_name .. "( ... )" )
  ASSERT(
    self.user_action,
    "delayed_fun_start:load: can not compile function with the name '%s'",
    tostring( self.action_name )
  )
  local array_item = ogse_unist.read_item_from_packet( packet )
  ASSERT(
    array_item.type == ogse_unist.types.array,
   "delayed_fun_start:load: wrong parameters readed"
  )
  self.fun_params = array_item:get_value()
end

function delayed_fun_start:save( t, template )
  for _, typ in ipairs({ "string", { "array" } }) do
    table.insert( template, typ )
  end
  table.insert( t, self.action_name )
  table.insert( t, self.fun_params  )
  return template
end

function delayed_fun_start:start()
  if self._residual_time then
    self.script_name = self.action_name
    savable_timer.start( self )
  else
    self._start_time    = self._start_time or game.get_game_time()
    self._high_priority = false
    register_any_timer( self )
  end
  return self
end

function delayed_fun_start:stop()
  if self._cond_slot_desc then
    savable_timer.stop( self )
  else
    unregister_any_timer( self )
  end
end

function delayed_fun_start:condition()
  return false
end

function delayed_fun_start:taction()
  self.user_action( unpack( self.fun_params ) )
end


function start_timer( name, delay, fname, ... )
  return delayed_fun_start( name )
    :set_delay( delay )
    :init( fname, ... )
    :start()
end

function start_gtimer( name, delay, fname, ... )
  return delayed_fun_start( name )
    :set_gdelay( delay )
    :init( fname, ... )
    :start()
end
